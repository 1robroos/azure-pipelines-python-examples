trigger:
- master

jobs:

- job: 'django_basic'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install -r django-basic/requirements.txt
    displayName: 'Install dependencies'

  - script: |
      pip install pytest-django
      cd django-basic/azuredemo
      pytest --junitxml=../../reports/django-basic.xml
    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'reports/django-basic.xml'
      testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
    condition: succeededOrFailed()

- job: 'django_multi_environment'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python36_Django213:
        python.version: '3.6'
        django.version: '2.1.3'
      Python37_Django213:
        python.version: '3.7'
        django.version: '2.1.3'
      Python37_Django214:
        python.version: '3.7'
        django.version: '2.1.4'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install django==$(django.version)
    displayName: 'Install dependencies'

  - script: |
      pip install pytest-django
      cd django-multi-environment/azuredemo
      pytest --junitxml=../../reports/django-multi-environment.xml
    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'reports/django-multi-environment.xml'
      testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version) - Django $(django.version)'
    condition: succeededOrFailed()

- job: 'flask_basic'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      cd flask-basic
      pip install '.[test]'
    displayName: 'Install dependencies'

  - script: |
      pip install pytest
      cd flask-basic
      pytest --junitxml=../reports/flask-basic.xml
    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'reports/flask-basic.xml'
      testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
    condition: succeededOrFailed()

- job: 'flask_basic_with_coverage'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      cd flask-basic
      pip install '.[test]'
    displayName: 'Install dependencies'

  - script: |
      pip install pytest coverage
      cd flask-basic
      coverage run -m pytest --junitxml=../reports/flask-basic-coverage.xml
      coverage report
    displayName: 'Run tests and coverage'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'reports/flask-basic-coverage.xml'
      testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
    condition: succeededOrFailed()

- job: 'library_basic'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install -r library-basic/requirements.txt
      cd library-basic
      pip install -e .
    displayName: 'Install dependencies'

  - script: |
      cd library-basic
      pytest --junitxml=../reports/library-basic.xml
    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'reports/library-basic.xml'
      testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
    condition: succeededOrFailed()


- job: 'library_flit'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install pytest flit mock codecov pydocstyle pytest-cov
      cd library-flit
      flit install
    displayName: 'Install dependencies'
  
  - script: |
      cd library-flit
      python -m pytest tests/ --junitxml=../reports/library-flit.xml --cov=demolib
      codecov
    displayName: 'pytest'
    env:
      CODECOV_TOKEN: '<CODECOV.IO TOKEN'
  
  - script: pydocstyle --ignore=D301,D212,D203 library-flit/demolib
    displayName: 'pydocstyle'

 - script: |
      cd library-flit
      flit build
    displayName: 'Build wheel'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'reports/library-flit.xml'
      testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
    condition: succeededOrFailed()